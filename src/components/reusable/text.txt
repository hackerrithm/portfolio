import React, { Component } from "react";
import { CustomButton } from "./CustomButton";

// type SyntheticEvent = React.SyntheticEvent;
type FormEvent = React.FormEvent<HTMLFormElement>;

interface IFormProps {
	// The type of button for the form
	submitButtonName: string;
	// The http path that the form will be posted to
	action: string;
	// A prop which allows content to be injected
	render: () => React.ReactNode;
}

export interface IValues {
	// Key value pairs for all the field values with key being the field name
	[key: string]: any;
}

export interface IErrors {
	// The validation error messages for each field (key is the field name
	[key: string]: string;
}

export interface IFormState {
	value: string;
	// The field values
	values: IValues;

	// The field validation error messages
	errors: IErrors;

	// Whether the form has been successfully submitted
	submitSuccess?: boolean;
}

export class Form extends Component<IFormProps, IFormState> {
	constructor(props: any) {
		super(props);

		const errors: IErrors = {};
		const values: IValues = {};
		let value = "";

		this.state = {
			value: value,
			values,
			errors,
		};

		// this.handleChange = this.handleChange.bind(this);
		this.handleSubmit = this.handleSubmit.bind(this);
	}

	// handleSubmit(event: FormEvent) {
	// 	alert("A name was submitted: " + this.state.value);
	// 	event.preventDefault();
	// }

	/**
	 * Returns whether there are any errors in the errors object that is passed in
	 * @param {IErrors} errors - The field errors
	 */
	private haveErrors(errors: IErrors): boolean {
		let haveError: boolean = false;
		Object.keys(errors).map((key: string) => {
			if (errors[key].length > 0) {
				haveError = true;
			}
		});
		return haveError;
	}

	/**
	 * Executes the validation rules for all the fields on the form and sets the error state
	 * @returns {boolean} - Whether the form is valid or not
	 */
	private validateForm(): boolean {
		// TODO - validate form
		return true;
	}

	/**
	 * Submits the form to the http api
	 * @returns {boolean} - Whether the form submission was successful or not
	 */
	private async submitForm(): Promise<boolean> {
		// TODO - submit the form
		return true;
	}

	/**
	 * Handles form submission
	 * @param {React.FormEvent<HTMLFormElement>} event - The form event
	 */
	private handleSubmit = async (event: FormEvent): Promise<void> => {
		event.preventDefault();

		if (this.validateForm()) {
			const submitSuccess: boolean = await this.submitForm();
			this.setState({ submitSuccess });
		}
	};

	public render() {
		const { submitSuccess, errors } = this.state;
		return (
			<div>
				<form onSubmit={this.handleSubmit} noValidate={true}>
					<div className="container">
						{this.props.render()}
						<div className="form-group">
							<CustomButton
								id="login-button"
								className="btn btn-primary"
								label={this.props.submitButtonName}
								disabled={this.haveErrors(errors)}
							/>
						</div>
						{submitSuccess && (
							<div className="alert alert-info" role="alert">
								The form was successfully submitted!
							</div>
						)}
						{submitSuccess === false && !this.haveErrors(errors) && (
							<div className="alert alert-danger" role="alert">
								Sorry, an unexpected error has occurred
							</div>
						)}
						{submitSuccess === false && this.haveErrors(errors) && (
							<div className="alert alert-danger" role="alert">
								Sorry, the form is invalid. Please review,
								adjust and try again
							</div>
						)}
					</div>
				</form>
			</div>
		);
	}
}
